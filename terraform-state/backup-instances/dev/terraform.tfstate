{
  "version": 4,
  "terraform_version": "1.0.11",
  "serial": 159,
  "lineage": "3483cfb4-fa3f-9a53-bf8a-57d792355e3d",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "hcloud_ssh_key",
      "name": "pelle",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "fingerprint": "e2:de:4f:30:bb:da:b4:18:1e:b3:75:d0:cc:aa:9d:5d",
            "id": 4879874,
            "labels": {},
            "name": "pelle",
            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCfLe7LP/VyKunVMtvF5IhK5ubV7dURbjlDbKDUwDZOUnNQTm82CGev0+0oki7sjWZ1hZswaQAxTLcPOff6MuJYEFw9YVslFqWLS0GOiOC0g6gLkFWPgWHVtIzyj99Vrmov032ktSK9UvIoZEKVq4E9QGeC/PcoMQpR/4BBYbDvhJftVt9aKlI8xjXa98OdSPVfL0h70/oUJF1aYRgrp6J86Cd/9TifHNvOEsNswVM7+IZaMjN4JuetOa9JMancKvAryjilXDfLQdnaxU8XUT3C5ItGF9y9qzz5ePoZt5U30xX3kTXp91icAiL6kGxzHR/rUquYfZcfO8/uZ2dyogAakfsvnO4xr8iYkaSJFVbR6063D3NjbFYDbK5nA3mrL4qW2uQhlSd/LXYNHil8y4l46vAqIRkoLWMaiFACXNycQyS9gSSNwqhyuwh8s5z+P3a4vLxLXLGFYOPSGUwWJxlnnMB59PG4AmdwSHcnotQZQNAeArMKqybbwxqHNCG025PNJJ07oYVwHEe0rlrzGercUw9AyZK1B9+N/gTZqVsBIi3iRue2cXssVvfUchmXwASiBl9Qt5TLu+FdxcPA8xjkW6NYg8LHhLgwp5fYo1Y4LX1k1vKatexl0UonKpmoWe9sz836NBvgF+gO6gSUyrD8u4K+fLRB8GPquZdl2khSyw== Christian Pelster",
            "selector": null,
            "with_selector": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "hcloud_volume",
      "name": "backup_storage",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "delete_protection": false,
            "id": 14866373,
            "labels": {},
            "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_14866373",
            "location": "fsn1",
            "name": "backup_storage_fsn1",
            "selector": null,
            "server_id": 16042276,
            "size": 64,
            "with_selector": null,
            "with_status": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "hetznerdns_zone",
      "name": "dns_zone",
      "provider": "provider[\"registry.terraform.io/timohirt/hetznerdns\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "BLyjzSLQ2xmm9iYaHrr83G",
            "name": "blcks.de",
            "ttl": 60
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d1671544fb414098c272125b50b58c6cee1cca7cc3f5bb36cb37ad450c1c7edd",
            "rendered": "#!/usr/bin/env bash\n\nset -eux\n#######################################\n# backup-cloud-init-configuration.sh  #\n#######################################\n\nexport SOLIDBLOCKS_VAULT_TOKEN=\"s.kbKJDxUfwnvgjpNVbxqAIhKT\"\nexport SOLIDBLOCKS_ENVIRONMENT=\"dev\"\nexport SOLIDBLOCKS_ROOT_DOMAIN=\"blcks.de\"\nexport SOLIDBLOCKS_PUBLIC_IP=\"49.12.116.72\"\nexport SOLIDBLOCKS_VERSION=\"snapshot-20211116111419\"\n\n#######################################\n# configuration.sh                    #\n#######################################\n\nexport DEBUG_LEVEL=\"${DEBUG_LEVEL:-0}\"\n\nexport SOLIDBLOCKS_DIR=\"${SOLIDBLOCKS_DIR:-/solidblocks}\"\nexport SOLIDBLOCKS_DEVELOPMENT_MODE=\"${SOLIDBLOCKS_DEVELOPMENT_MODE:-0}\"\nexport SOLIDBLOCKS_CONFIG_FILE=\"${SOLIDBLOCKS_DIR}/solidblocks.json\"\nexport SOLIDBLOCKS_CERTIFICATES_DIR=\"${SOLIDBLOCKS_DIR}/certificates\"\nexport SOLIDBLOCKS_GROUP=\"${SOLIDBLOCKS_GROUP:-solidblocks}\"\n\nfunction bootstrap_solidblocks() {\n\n  # shellcheck disable=SC2086\n  mkdir -p ${SOLIDBLOCKS_DIR}/{protected,instance,templates,config,lib,bin,certificates}\n  chmod 700 \"${SOLIDBLOCKS_DIR}/protected\"\n\n  local github_owner=\"pellepelster\"\n  (\n      local config_file=\"${SOLIDBLOCKS_DIR}/cloud_init_config.json\"\n      vault_read_secret \"nodes/cloud_init_config\" \u003e ${config_file}\n\n      local temp_file=\"$(mktemp)\"\n\n      curl_wrapper -u \"${github_owner}:$(jq -r \".github_token_ro\" \"${config_file}\")\" -L \\\n        https://maven.pkg.github.com/${github_owner}/solidblocks/solidblocks/solidblocks-cloud-init/${SOLIDBLOCKS_VERSION}/solidblocks-cloud-init-${SOLIDBLOCKS_VERSION}.jar \u003e ${temp_file}\n\n      cd \"${SOLIDBLOCKS_DIR}\" || exit 1\n      unzip ${temp_file}\n      rm -rf ${temp_file}\n  )\n}\n\n#######################################\n# curl.sh                             #\n#######################################\n\nfunction curl_wrapper() {\n    while ! curl --retry 25 --retry-connrefused --fail --silent --location --show-error \"$@\"; do\n        sleep 5\n    done\n}\n\nfunction curl_wrapper_nofail() {\n    while ! curl --retry 25 --retry-connrefused --silent --location --show-error \"$@\"; do\n        sleep 5\n    done\n}\n#######################################\n# common.sh                           #\n#######################################\n\nfunction package_update {\n  apt-get update\n}\n\nfunction package_check_and_install {\n\tlocal package=${1}\n\techo -n \"checking if package '${package}' is installed...\"\n\tif [[ $(dpkg-query -W -f='${Status}' \"${package}\" 2\u003e/dev/null | grep -c \"ok installed\") -eq 0 ]];\n\tthen\n\t\techo \"not found, installing now\"\n\t\twhile ! DEBIAN_FRONTEND=\"noninteractive\" apt-get install --no-install-recommends -qq -y \"${package}\"; do\n    \t\techo \"installing failed retrying in 30 seconds\"\n    \t\tsleep 30\n    \t\tapt-get update\n\t\tdone\n\telse\n\t\techo \"ok\"\n\tfi\n}\n\nfunction create_directory_if_needed {\n    local directory=\"${1}\"\n\n    if [[ ! -d \"${directory}\" ]]; then\n        mkdir -p \"${directory}\"\n    fi\n}\n\nfunction download_and_verify_checksum {\n    local url=${1}\n    local target_file=${2}\n    local checksum=${3}\n\n    if [[ -f \"${target_file}\" ]]; then\n        local target_file_checksum\n        target_file_checksum=$(sha256sum \"${target_file}\" | cut -d' ' -f1)\n        if [[ \"${target_file_checksum}\" = \"${checksum}\" ]]; then\n            echo \"${url} already downloaded\"\n            return\n        fi\n    fi\n\n    create_directory_if_needed \"$(dirname \"${target_file}\")\"\n\n    echo -n \"downloading ${url}...\"\n    curl_wrapper \"${url}\" --output \"${target_file}\" \u003e /dev/null\n    echo \"done\"\n\n\n    echo -n \"verifying checksum...\"\n    echo \"${checksum}\" \"${target_file}\" | sha256sum --check --quiet\n    echo \"done\"\n}\n\n#######################################\n# network.sh                          #\n#######################################\n\nfunction configure_public_ip() {\n  ip addr add ${SOLIDBLOCKS_PUBLIC_IP} dev eth0\n}\n\n#######################################\n# vault.sh                            #\n#######################################\n\nfunction vault_read_secret() {\n  local path=\"${1:-}\"\n  curl_wrapper -H \"X-Vault-Token: ${SOLIDBLOCKS_VAULT_TOKEN}\" \"https://vault.${SOLIDBLOCKS_ENVIRONMENT}.${SOLIDBLOCKS_ROOT_DOMAIN}:8200/v1/solidblocks/data/${path}\" | jq .data.data\n}\n\n\n\nconfigure_public_ip\n\npackage_update\npackage_check_and_install \"jq\"\npackage_check_and_install \"unzip\"\n\nbootstrap_solidblocks",
            "template": "#!/usr/bin/env bash\n\nset -eux\n#######################################\n# backup-cloud-init-configuration.sh  #\n#######################################\n\nexport SOLIDBLOCKS_VAULT_TOKEN=\"${vault_token}\"\nexport SOLIDBLOCKS_ENVIRONMENT=\"${environment}\"\nexport SOLIDBLOCKS_ROOT_DOMAIN=\"${root_domain}\"\nexport SOLIDBLOCKS_PUBLIC_IP=\"${public_ip}\"\nexport SOLIDBLOCKS_VERSION=\"${solidblocks_version}\"\n\n#######################################\n# configuration.sh                    #\n#######################################\n\nexport DEBUG_LEVEL=\"$${DEBUG_LEVEL:-0}\"\n\nexport SOLIDBLOCKS_DIR=\"$${SOLIDBLOCKS_DIR:-/solidblocks}\"\nexport SOLIDBLOCKS_DEVELOPMENT_MODE=\"$${SOLIDBLOCKS_DEVELOPMENT_MODE:-0}\"\nexport SOLIDBLOCKS_CONFIG_FILE=\"$${SOLIDBLOCKS_DIR}/solidblocks.json\"\nexport SOLIDBLOCKS_CERTIFICATES_DIR=\"$${SOLIDBLOCKS_DIR}/certificates\"\nexport SOLIDBLOCKS_GROUP=\"$${SOLIDBLOCKS_GROUP:-solidblocks}\"\n\nfunction bootstrap_solidblocks() {\n\n  # shellcheck disable=SC2086\n  mkdir -p $${SOLIDBLOCKS_DIR}/{protected,instance,templates,config,lib,bin,certificates}\n  chmod 700 \"$${SOLIDBLOCKS_DIR}/protected\"\n\n  local github_owner=\"pellepelster\"\n  (\n      local config_file=\"$${SOLIDBLOCKS_DIR}/cloud_init_config.json\"\n      vault_read_secret \"nodes/cloud_init_config\" \u003e $${config_file}\n\n      local temp_file=\"$(mktemp)\"\n\n      curl_wrapper -u \"$${github_owner}:$(jq -r \".github_token_ro\" \"$${config_file}\")\" -L \\\n        https://maven.pkg.github.com/$${github_owner}/solidblocks/solidblocks/solidblocks-cloud-init/$${SOLIDBLOCKS_VERSION}/solidblocks-cloud-init-$${SOLIDBLOCKS_VERSION}.jar \u003e $${temp_file}\n\n      cd \"$${SOLIDBLOCKS_DIR}\" || exit 1\n      unzip $${temp_file}\n      rm -rf $${temp_file}\n  )\n}\n\n#######################################\n# curl.sh                             #\n#######################################\n\nfunction curl_wrapper() {\n    while ! curl --retry 25 --retry-connrefused --fail --silent --location --show-error \"$@\"; do\n        sleep 5\n    done\n}\n\nfunction curl_wrapper_nofail() {\n    while ! curl --retry 25 --retry-connrefused --silent --location --show-error \"$@\"; do\n        sleep 5\n    done\n}\n#######################################\n# common.sh                           #\n#######################################\n\nfunction package_update {\n  apt-get update\n}\n\nfunction package_check_and_install {\n\tlocal package=$${1}\n\techo -n \"checking if package '$${package}' is installed...\"\n\tif [[ $(dpkg-query -W -f='$${Status}' \"$${package}\" 2\u003e/dev/null | grep -c \"ok installed\") -eq 0 ]];\n\tthen\n\t\techo \"not found, installing now\"\n\t\twhile ! DEBIAN_FRONTEND=\"noninteractive\" apt-get install --no-install-recommends -qq -y \"$${package}\"; do\n    \t\techo \"installing failed retrying in 30 seconds\"\n    \t\tsleep 30\n    \t\tapt-get update\n\t\tdone\n\telse\n\t\techo \"ok\"\n\tfi\n}\n\nfunction create_directory_if_needed {\n    local directory=\"$${1}\"\n\n    if [[ ! -d \"$${directory}\" ]]; then\n        mkdir -p \"$${directory}\"\n    fi\n}\n\nfunction download_and_verify_checksum {\n    local url=$${1}\n    local target_file=$${2}\n    local checksum=$${3}\n\n    if [[ -f \"$${target_file}\" ]]; then\n        local target_file_checksum\n        target_file_checksum=$(sha256sum \"$${target_file}\" | cut -d' ' -f1)\n        if [[ \"$${target_file_checksum}\" = \"$${checksum}\" ]]; then\n            echo \"$${url} already downloaded\"\n            return\n        fi\n    fi\n\n    create_directory_if_needed \"$(dirname \"$${target_file}\")\"\n\n    echo -n \"downloading $${url}...\"\n    curl_wrapper \"$${url}\" --output \"$${target_file}\" \u003e /dev/null\n    echo \"done\"\n\n\n    echo -n \"verifying checksum...\"\n    echo \"$${checksum}\" \"$${target_file}\" | sha256sum --check --quiet\n    echo \"done\"\n}\n\n#######################################\n# network.sh                          #\n#######################################\n\nfunction configure_public_ip() {\n  ip addr add $${SOLIDBLOCKS_PUBLIC_IP} dev eth0\n}\n\n#######################################\n# vault.sh                            #\n#######################################\n\nfunction vault_read_secret() {\n  local path=\"$${1:-}\"\n  curl_wrapper -H \"X-Vault-Token: $${SOLIDBLOCKS_VAULT_TOKEN}\" \"https://vault.$${SOLIDBLOCKS_ENVIRONMENT}.$${SOLIDBLOCKS_ROOT_DOMAIN}:8200/v1/solidblocks/data/$${path}\" | jq .data.data\n}\n\n\n\nconfigure_public_ip\n\npackage_update\npackage_check_and_install \"jq\"\npackage_check_and_install \"unzip\"\n\nbootstrap_solidblocks",
            "vars": {
              "environment": "dev",
              "hostname": "backup",
              "public_ip": "49.12.116.72",
              "root_domain": "blcks.de",
              "solidblocks_version": "snapshot-20211116111419",
              "vault_token": "s.kbKJDxUfwnvgjpNVbxqAIhKT"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "vault_token",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "hcloud_floating_ip",
      "name": "backup",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "delete_protection": false,
            "description": "",
            "home_location": "fsn1",
            "id": "565670",
            "ip_address": "49.12.116.72",
            "ip_network": null,
            "labels": {},
            "name": "backup_",
            "server_id": 16042276,
            "type": "ipv4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "hcloud_floating_ip_assignment",
      "name": "backup_ip_assignment",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "floating_ip_id": 565670,
            "id": "565670",
            "server_id": 16042606
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.hcloud_ssh_key.pelle",
            "data.template_file.user_data",
            "hcloud_floating_ip.backup",
            "hcloud_server.backup"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "hcloud_server",
      "name": "backup",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "backup_window": "",
            "backups": false,
            "datacenter": "fsn1-dc14",
            "delete_protection": false,
            "firewall_ids": [],
            "id": "16042606",
            "image": "debian-9",
            "ipv4_address": "78.47.192.244",
            "ipv6_address": "2a01:4f8:1c17:500d::1",
            "ipv6_network": "2a01:4f8:1c17:500d::/64",
            "iso": null,
            "keep_disk": false,
            "labels": null,
            "location": "fsn1",
            "name": "backup",
            "network": [],
            "placement_group_id": null,
            "rebuild_protection": false,
            "rescue": null,
            "server_type": "cx21",
            "ssh_keys": [
              "4879874"
            ],
            "status": "running",
            "timeouts": null,
            "user_data": "wum7lm3IAOPQjvSHn/jOrrBwX8g="
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo1NDAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "data.hcloud_ssh_key.pelle",
            "data.template_file.user_data"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "hcloud_volume_attachment",
      "name": "backup__volume_attachment",
      "provider": "provider[\"registry.terraform.io/hetznercloud/hcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "automount": null,
            "id": "14866373",
            "server_id": 16042606,
            "volume_id": 14866373
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.hcloud_ssh_key.pelle",
            "data.hcloud_volume.backup_storage",
            "data.template_file.user_data",
            "hcloud_server.backup"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "hetznerdns_record",
      "name": "backup",
      "provider": "provider[\"registry.terraform.io/timohirt/hetznerdns\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1b9ff26971fda4b4cc56f6f6ef3751d3",
            "name": "backup.dev",
            "ttl": 60,
            "type": "A",
            "value": "49.12.116.72",
            "zone_id": "BLyjzSLQ2xmm9iYaHrr83G"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.hetznerdns_zone.dns_zone",
            "hcloud_floating_ip.backup"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "vault_token",
      "name": "cloud_init",
      "provider": "provider[\"registry.terraform.io/hashicorp/vault\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "client_token": "s.kbKJDxUfwnvgjpNVbxqAIhKT",
            "display_name": "token",
            "encrypted_client_token": "",
            "explicit_max_ttl": null,
            "id": "WZaJJYLTun3ugO5ubm7TReir",
            "lease_duration": 2764799,
            "lease_started": "2021-11-16T10:47:33Z",
            "no_default_policy": null,
            "no_parent": false,
            "num_uses": 0,
            "period": null,
            "pgp_key": "",
            "policies": [
              "cloud_init"
            ],
            "renew_increment": null,
            "renew_min_lease": null,
            "renewable": true,
            "role_name": null,
            "ttl": null,
            "wrapped_token": null,
            "wrapping_accessor": null,
            "wrapping_ttl": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
