/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables

import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.indexes.IDX_SCHEDULED_TASKS_NAME_INSTANCE
import de.solidblocks.config.db.tables.records.ScheduledTasksRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ScheduledTasks(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ScheduledTasksRecord>?,
    aliased: Table<ScheduledTasksRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<ScheduledTasksRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>SCHEDULED_TASKS</code>
         */
        val SCHEDULED_TASKS = ScheduledTasks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ScheduledTasksRecord> = ScheduledTasksRecord::class.java

    /**
     * The column <code>SCHEDULED_TASKS.TASK_NAME</code>.
     */
    val TASK_NAME: TableField<ScheduledTasksRecord, String?> = createField(DSL.name("TASK_NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.TASK_INSTANCE</code>.
     */
    val TASK_INSTANCE: TableField<ScheduledTasksRecord, String?> = createField(DSL.name("TASK_INSTANCE"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.TASK_DATA</code>.
     */
    val TASK_DATA: TableField<ScheduledTasksRecord, ByteArray?> = createField(DSL.name("TASK_DATA"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>SCHEDULED_TASKS.EXECUTION_TIME</code>.
     */
    val EXECUTION_TIME: TableField<ScheduledTasksRecord, LocalDateTime?> = createField(DSL.name("EXECUTION_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.PICKED</code>.
     */
    val PICKED: TableField<ScheduledTasksRecord, Boolean?> = createField(DSL.name("PICKED"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.PICKED_BY</code>.
     */
    val PICKED_BY: TableField<ScheduledTasksRecord, String?> = createField(DSL.name("PICKED_BY"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.LAST_SUCCESS</code>.
     */
    val LAST_SUCCESS: TableField<ScheduledTasksRecord, LocalDateTime?> = createField(DSL.name("LAST_SUCCESS"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.LAST_FAILURE</code>.
     */
    val LAST_FAILURE: TableField<ScheduledTasksRecord, LocalDateTime?> = createField(DSL.name("LAST_FAILURE"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.CONSECUTIVE_FAILURES</code>.
     */
    val CONSECUTIVE_FAILURES: TableField<ScheduledTasksRecord, Int?> = createField(DSL.name("CONSECUTIVE_FAILURES"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>SCHEDULED_TASKS.LAST_HEARTBEAT</code>.
     */
    val LAST_HEARTBEAT: TableField<ScheduledTasksRecord, LocalDateTime?> = createField(DSL.name("LAST_HEARTBEAT"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>SCHEDULED_TASKS.VERSION</code>.
     */
    val VERSION: TableField<ScheduledTasksRecord, Long?> = createField(DSL.name("VERSION"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ScheduledTasksRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ScheduledTasksRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>SCHEDULED_TASKS</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>SCHEDULED_TASKS</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>SCHEDULED_TASKS</code> table reference
     */
    constructor() : this(DSL.name("SCHEDULED_TASKS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ScheduledTasksRecord>) : this(Internal.createPathAlias(child, key), child, key, SCHEDULED_TASKS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_SCHEDULED_TASKS_NAME_INSTANCE)
    override fun `as`(alias: String): ScheduledTasks = ScheduledTasks(DSL.name(alias), this)
    override fun `as`(alias: Name): ScheduledTasks = ScheduledTasks(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ScheduledTasks = ScheduledTasks(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ScheduledTasks = ScheduledTasks(name, null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?> = super.fieldsRow() as Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?>
}
