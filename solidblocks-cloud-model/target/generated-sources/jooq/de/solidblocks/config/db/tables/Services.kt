/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables

import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.indexes.IDX_SERVICES_TENANT_NAME
import de.solidblocks.config.db.keys.FK_SERVICES_TENANT_ID
import de.solidblocks.config.db.keys.PK_SERVICES
import de.solidblocks.config.db.tables.records.ServicesRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.util.UUID
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Services(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ServicesRecord>?,
    aliased: Table<ServicesRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<ServicesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>SERVICES</code>
         */
        val SERVICES = Services()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ServicesRecord> = ServicesRecord::class.java

    /**
     * The column <code>SERVICES.ID</code>.
     */
    val ID: TableField<ServicesRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>SERVICES.NAME</code>.
     */
    val NAME: TableField<ServicesRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>SERVICES.TYPE</code>.
     */
    val TYPE: TableField<ServicesRecord, String?> = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>SERVICES.DELETED</code>.
     */
    val DELETED: TableField<ServicesRecord, Boolean?> = createField(DSL.name("DELETED"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>SERVICES.TENANT</code>.
     */
    val TENANT: TableField<ServicesRecord, UUID?> = createField(DSL.name("TENANT"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ServicesRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ServicesRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>SERVICES</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>SERVICES</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>SERVICES</code> table reference
     */
    constructor() : this(DSL.name("SERVICES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ServicesRecord>) : this(Internal.createPathAlias(child, key), child, key, SERVICES, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_SERVICES_TENANT_NAME)
    override fun getPrimaryKey(): UniqueKey<ServicesRecord> = PK_SERVICES
    override fun getKeys(): List<UniqueKey<ServicesRecord>> = listOf(PK_SERVICES)
    override fun getReferences(): List<ForeignKey<ServicesRecord, *>> = listOf(FK_SERVICES_TENANT_ID)

    private lateinit var _tenants: Tenants
    fun tenants(): Tenants {
        if (!this::_tenants.isInitialized)
            _tenants = Tenants(this, FK_SERVICES_TENANT_ID)

        return _tenants
    }
    override fun `as`(alias: String): Services = Services(DSL.name(alias), this)
    override fun `as`(alias: Name): Services = Services(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Services = Services(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Services = Services(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, String?, String?, Boolean?, UUID?> = super.fieldsRow() as Row5<UUID?, String?, String?, Boolean?, UUID?>
}
