/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables


import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.indexes.IDX_USERS_EMAIL
import de.solidblocks.config.db.keys.FK_USERS_CLOUDS_ID
import de.solidblocks.config.db.keys.FK_USERS_ENVIRONMENT_ID
import de.solidblocks.config.db.keys.FK_USERS_TENANTS_ID
import de.solidblocks.config.db.keys.PK_USERS
import de.solidblocks.config.db.tables.records.UsersRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Users(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>USERS</code>
         */
        val USERS = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>USERS.ID</code>.
     */
    val ID: TableField<UsersRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>USERS.EMAIL</code>.
     */
    val EMAIL: TableField<UsersRecord, String?> = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>USERS.PASSWORD</code>.
     */
    val PASSWORD: TableField<UsersRecord, String?> = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>USERS.SALT</code>.
     */
    val SALT: TableField<UsersRecord, String?> = createField(DSL.name("SALT"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>USERS.ADMIN</code>.
     */
    val ADMIN: TableField<UsersRecord, Boolean?> = createField(DSL.name("ADMIN"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>USERS.DELETED</code>.
     */
    val DELETED: TableField<UsersRecord, Boolean?> = createField(DSL.name("DELETED"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>USERS.CLOUD</code>.
     */
    val CLOUD: TableField<UsersRecord, UUID?> = createField(DSL.name("CLOUD"), SQLDataType.UUID, this, "")

    /**
     * The column <code>USERS.ENVIRONMENT</code>.
     */
    val ENVIRONMENT: TableField<UsersRecord, UUID?> = createField(DSL.name("ENVIRONMENT"), SQLDataType.UUID, this, "")

    /**
     * The column <code>USERS.TENANT</code>.
     */
    val TENANT: TableField<UsersRecord, UUID?> = createField(DSL.name("TENANT"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>USERS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>USERS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>USERS</code> table reference
     */
    constructor(): this(DSL.name("USERS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersRecord>): this(Internal.createPathAlias(child, key), child, key, USERS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_USERS_EMAIL)
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = PK_USERS
    override fun getKeys(): List<UniqueKey<UsersRecord>> = listOf(PK_USERS)
    override fun getReferences(): List<ForeignKey<UsersRecord, *>> = listOf(FK_USERS_CLOUDS_ID, FK_USERS_ENVIRONMENT_ID, FK_USERS_TENANTS_ID)

    private lateinit var _clouds: Clouds
    private lateinit var _environments: Environments
    private lateinit var _tenants: Tenants
    fun clouds(): Clouds {
        if (!this::_clouds.isInitialized)
            _clouds = Clouds(this, FK_USERS_CLOUDS_ID)

        return _clouds;
    }
    fun environments(): Environments {
        if (!this::_environments.isInitialized)
            _environments = Environments(this, FK_USERS_ENVIRONMENT_ID)

        return _environments;
    }
    fun tenants(): Tenants {
        if (!this::_tenants.isInitialized)
            _tenants = Tenants(this, FK_USERS_TENANTS_ID)

        return _tenants;
    }
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<UUID?, String?, String?, String?, Boolean?, Boolean?, UUID?, UUID?, UUID?> = super.fieldsRow() as Row9<UUID?, String?, String?, String?, Boolean?, Boolean?, UUID?, UUID?, UUID?>
}
