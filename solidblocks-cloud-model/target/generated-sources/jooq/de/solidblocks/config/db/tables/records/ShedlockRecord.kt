/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables.records

import de.solidblocks.config.db.tables.Shedlock
import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShedlockRecord() : UpdatableRecordImpl<ShedlockRecord>(Shedlock.SHEDLOCK), Record4<String?, String?, LocalDateTime?, LocalDateTime?> {

    var name: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var lockedBy: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var lockUntil: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    var lockedAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row4<String?, String?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row4<String?, String?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row4<String?, String?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<String?> = Shedlock.SHEDLOCK.NAME
    override fun field2(): Field<String?> = Shedlock.SHEDLOCK.LOCKED_BY
    override fun field3(): Field<LocalDateTime?> = Shedlock.SHEDLOCK.LOCK_UNTIL
    override fun field4(): Field<LocalDateTime?> = Shedlock.SHEDLOCK.LOCKED_AT
    override fun component1(): String? = name
    override fun component2(): String? = lockedBy
    override fun component3(): LocalDateTime? = lockUntil
    override fun component4(): LocalDateTime? = lockedAt
    override fun value1(): String? = name
    override fun value2(): String? = lockedBy
    override fun value3(): LocalDateTime? = lockUntil
    override fun value4(): LocalDateTime? = lockedAt

    override fun value1(value: String?): ShedlockRecord {
        this.name = value
        return this
    }

    override fun value2(value: String?): ShedlockRecord {
        this.lockedBy = value
        return this
    }

    override fun value3(value: LocalDateTime?): ShedlockRecord {
        this.lockUntil = value
        return this
    }

    override fun value4(value: LocalDateTime?): ShedlockRecord {
        this.lockedAt = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: LocalDateTime?, value4: LocalDateTime?): ShedlockRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ShedlockRecord
     */
    constructor(name: String? = null, lockedBy: String? = null, lockUntil: LocalDateTime? = null, lockedAt: LocalDateTime? = null) : this() {
        this.name = name
        this.lockedBy = lockedBy
        this.lockUntil = lockUntil
        this.lockedAt = lockedAt
    }
}
