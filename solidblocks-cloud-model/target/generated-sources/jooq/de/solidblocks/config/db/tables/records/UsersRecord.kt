/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables.records

import de.solidblocks.config.db.tables.Users
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersRecord() : UpdatableRecordImpl<UsersRecord>(Users.USERS), Record5<UUID?, String?, String?, String?, Boolean?> {

    var id: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var email: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var password: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var salt: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var deleted: Boolean?
        set(value) = set(4, value)
        get() = get(4) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, String?, String?, String?, Boolean?> = super.fieldsRow() as Row5<UUID?, String?, String?, String?, Boolean?>
    override fun valuesRow(): Row5<UUID?, String?, String?, String?, Boolean?> = super.valuesRow() as Row5<UUID?, String?, String?, String?, Boolean?>
    override fun field1(): Field<UUID?> = Users.USERS.ID
    override fun field2(): Field<String?> = Users.USERS.EMAIL
    override fun field3(): Field<String?> = Users.USERS.PASSWORD
    override fun field4(): Field<String?> = Users.USERS.SALT
    override fun field5(): Field<Boolean?> = Users.USERS.DELETED
    override fun component1(): UUID? = id
    override fun component2(): String? = email
    override fun component3(): String? = password
    override fun component4(): String? = salt
    override fun component5(): Boolean? = deleted
    override fun value1(): UUID? = id
    override fun value2(): String? = email
    override fun value3(): String? = password
    override fun value4(): String? = salt
    override fun value5(): Boolean? = deleted

    override fun value1(value: UUID?): UsersRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UsersRecord {
        this.email = value
        return this
    }

    override fun value3(value: String?): UsersRecord {
        this.password = value
        return this
    }

    override fun value4(value: String?): UsersRecord {
        this.salt = value
        return this
    }

    override fun value5(value: Boolean?): UsersRecord {
        this.deleted = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: String?, value5: Boolean?): UsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: UUID? = null, email: String? = null, password: String? = null, salt: String? = null, deleted: Boolean? = null) : this() {
        this.id = id
        this.email = email
        this.password = password
        this.salt = salt
        this.deleted = deleted
    }
}
