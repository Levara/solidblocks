/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables

import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.keys.PK_STATUS
import de.solidblocks.config.db.tables.records.StatusRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime
import java.util.UUID
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Status(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StatusRecord>?,
    aliased: Table<StatusRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<StatusRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>STATUS</code>
         */
        val STATUS = Status()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StatusRecord> = StatusRecord::class.java

    /**
     * The column <code>STATUS.ID</code>.
     */
    val ID: TableField<StatusRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>STATUS.ENTITY</code>.
     */
    val ENTITY: TableField<StatusRecord, UUID?> = createField(DSL.name("ENTITY"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>STATUS.STATUS</code>.
     */
    val STATUS_: TableField<StatusRecord, String?> = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>STATUS.CODE</code>.
     */
    val CODE: TableField<StatusRecord, String?> = createField(DSL.name("CODE"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>STATUS.STATUS_TIMESTAMP</code>.
     */
    val STATUS_TIMESTAMP: TableField<StatusRecord, LocalDateTime?> = createField(DSL.name("STATUS_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("NOW()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<StatusRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StatusRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>STATUS</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>STATUS</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>STATUS</code> table reference
     */
    constructor() : this(DSL.name("STATUS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StatusRecord>) : this(Internal.createPathAlias(child, key), child, key, STATUS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<StatusRecord> = PK_STATUS
    override fun getKeys(): List<UniqueKey<StatusRecord>> = listOf(PK_STATUS)
    override fun `as`(alias: String): Status = Status(DSL.name(alias), this)
    override fun `as`(alias: Name): Status = Status(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Status = Status(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Status = Status(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, UUID?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row5<UUID?, UUID?, String?, String?, LocalDateTime?>
}
