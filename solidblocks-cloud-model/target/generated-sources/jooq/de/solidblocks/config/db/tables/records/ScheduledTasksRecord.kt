/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables.records


import de.solidblocks.config.db.tables.ScheduledTasks

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ScheduledTasksRecord() : TableRecordImpl<ScheduledTasksRecord>(ScheduledTasks.SCHEDULED_TASKS), Record11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?> {

    var taskName: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var taskInstance: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var taskData: ByteArray?
        set(value) = set(2, value)
        get() = get(2) as ByteArray?

    var executionTime: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    var picked: Boolean?
        set(value) = set(4, value)
        get() = get(4) as Boolean?

    var pickedBy: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var lastSuccess: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var lastFailure: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    var consecutiveFailures: Int?
        set(value) = set(8, value)
        get() = get(8) as Int?

    var lastHeartbeat: LocalDateTime?
        set(value) = set(9, value)
        get() = get(9) as LocalDateTime?

    var version: Long?
        set(value) = set(10, value)
        get() = get(10) as Long?

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?> = super.fieldsRow() as Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?>
    override fun valuesRow(): Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?> = super.valuesRow() as Row11<String?, String?, ByteArray?, LocalDateTime?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Int?, LocalDateTime?, Long?>
    override fun field1(): Field<String?> = ScheduledTasks.SCHEDULED_TASKS.TASK_NAME
    override fun field2(): Field<String?> = ScheduledTasks.SCHEDULED_TASKS.TASK_INSTANCE
    override fun field3(): Field<ByteArray?> = ScheduledTasks.SCHEDULED_TASKS.TASK_DATA
    override fun field4(): Field<LocalDateTime?> = ScheduledTasks.SCHEDULED_TASKS.EXECUTION_TIME
    override fun field5(): Field<Boolean?> = ScheduledTasks.SCHEDULED_TASKS.PICKED
    override fun field6(): Field<String?> = ScheduledTasks.SCHEDULED_TASKS.PICKED_BY
    override fun field7(): Field<LocalDateTime?> = ScheduledTasks.SCHEDULED_TASKS.LAST_SUCCESS
    override fun field8(): Field<LocalDateTime?> = ScheduledTasks.SCHEDULED_TASKS.LAST_FAILURE
    override fun field9(): Field<Int?> = ScheduledTasks.SCHEDULED_TASKS.CONSECUTIVE_FAILURES
    override fun field10(): Field<LocalDateTime?> = ScheduledTasks.SCHEDULED_TASKS.LAST_HEARTBEAT
    override fun field11(): Field<Long?> = ScheduledTasks.SCHEDULED_TASKS.VERSION
    override fun component1(): String? = taskName
    override fun component2(): String? = taskInstance
    override fun component3(): ByteArray? = taskData
    override fun component4(): LocalDateTime? = executionTime
    override fun component5(): Boolean? = picked
    override fun component6(): String? = pickedBy
    override fun component7(): LocalDateTime? = lastSuccess
    override fun component8(): LocalDateTime? = lastFailure
    override fun component9(): Int? = consecutiveFailures
    override fun component10(): LocalDateTime? = lastHeartbeat
    override fun component11(): Long? = version
    override fun value1(): String? = taskName
    override fun value2(): String? = taskInstance
    override fun value3(): ByteArray? = taskData
    override fun value4(): LocalDateTime? = executionTime
    override fun value5(): Boolean? = picked
    override fun value6(): String? = pickedBy
    override fun value7(): LocalDateTime? = lastSuccess
    override fun value8(): LocalDateTime? = lastFailure
    override fun value9(): Int? = consecutiveFailures
    override fun value10(): LocalDateTime? = lastHeartbeat
    override fun value11(): Long? = version

    override fun value1(value: String?): ScheduledTasksRecord {
        this.taskName = value
        return this
    }

    override fun value2(value: String?): ScheduledTasksRecord {
        this.taskInstance = value
        return this
    }

    override fun value3(value: ByteArray?): ScheduledTasksRecord {
        this.taskData = value
        return this
    }

    override fun value4(value: LocalDateTime?): ScheduledTasksRecord {
        this.executionTime = value
        return this
    }

    override fun value5(value: Boolean?): ScheduledTasksRecord {
        this.picked = value
        return this
    }

    override fun value6(value: String?): ScheduledTasksRecord {
        this.pickedBy = value
        return this
    }

    override fun value7(value: LocalDateTime?): ScheduledTasksRecord {
        this.lastSuccess = value
        return this
    }

    override fun value8(value: LocalDateTime?): ScheduledTasksRecord {
        this.lastFailure = value
        return this
    }

    override fun value9(value: Int?): ScheduledTasksRecord {
        this.consecutiveFailures = value
        return this
    }

    override fun value10(value: LocalDateTime?): ScheduledTasksRecord {
        this.lastHeartbeat = value
        return this
    }

    override fun value11(value: Long?): ScheduledTasksRecord {
        this.version = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ByteArray?, value4: LocalDateTime?, value5: Boolean?, value6: String?, value7: LocalDateTime?, value8: LocalDateTime?, value9: Int?, value10: LocalDateTime?, value11: Long?): ScheduledTasksRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised ScheduledTasksRecord
     */
    constructor(taskName: String? = null, taskInstance: String? = null, taskData: ByteArray? = null, executionTime: LocalDateTime? = null, picked: Boolean? = null, pickedBy: String? = null, lastSuccess: LocalDateTime? = null, lastFailure: LocalDateTime? = null, consecutiveFailures: Int? = null, lastHeartbeat: LocalDateTime? = null, version: Long? = null): this() {
        this.taskName = taskName
        this.taskInstance = taskInstance
        this.taskData = taskData
        this.executionTime = executionTime
        this.picked = picked
        this.pickedBy = pickedBy
        this.lastSuccess = lastSuccess
        this.lastFailure = lastFailure
        this.consecutiveFailures = consecutiveFailures
        this.lastHeartbeat = lastHeartbeat
        this.version = version
    }
}
