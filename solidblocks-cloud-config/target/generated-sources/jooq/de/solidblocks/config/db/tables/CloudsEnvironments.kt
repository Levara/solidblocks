/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables


import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.indexes.IDX_CLOUDS_ENVIRONMENTS_NAME
import de.solidblocks.config.db.keys.FK_CLOUDS_ENVIRONMENTS_CLOUD_ID
import de.solidblocks.config.db.keys.PK_CLOUDS_ENVIRONMENTS
import de.solidblocks.config.db.tables.records.CloudsEnvironmentsRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CloudsEnvironments(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CloudsEnvironmentsRecord>?,
    aliased: Table<CloudsEnvironmentsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CloudsEnvironmentsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>CLOUDS_ENVIRONMENTS</code>
         */
        val CLOUDS_ENVIRONMENTS = CloudsEnvironments()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CloudsEnvironmentsRecord> = CloudsEnvironmentsRecord::class.java

    /**
     * The column <code>CLOUDS_ENVIRONMENTS.ID</code>.
     */
    val ID: TableField<CloudsEnvironmentsRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>CLOUDS_ENVIRONMENTS.NAME</code>.
     */
    val NAME: TableField<CloudsEnvironmentsRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>CLOUDS_ENVIRONMENTS.CLOUD</code>.
     */
    val CLOUD: TableField<CloudsEnvironmentsRecord, UUID?> = createField(DSL.name("CLOUD"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CloudsEnvironmentsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CloudsEnvironmentsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>CLOUDS_ENVIRONMENTS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>CLOUDS_ENVIRONMENTS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>CLOUDS_ENVIRONMENTS</code> table reference
     */
    constructor(): this(DSL.name("CLOUDS_ENVIRONMENTS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CloudsEnvironmentsRecord>): this(Internal.createPathAlias(child, key), child, key, CLOUDS_ENVIRONMENTS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_CLOUDS_ENVIRONMENTS_NAME)
    override fun getPrimaryKey(): UniqueKey<CloudsEnvironmentsRecord> = PK_CLOUDS_ENVIRONMENTS
    override fun getKeys(): List<UniqueKey<CloudsEnvironmentsRecord>> = listOf(PK_CLOUDS_ENVIRONMENTS)
    override fun getReferences(): List<ForeignKey<CloudsEnvironmentsRecord, *>> = listOf(FK_CLOUDS_ENVIRONMENTS_CLOUD_ID)

    private lateinit var _clouds: Clouds
    fun clouds(): Clouds {
        if (!this::_clouds.isInitialized)
            _clouds = Clouds(this, FK_CLOUDS_ENVIRONMENTS_CLOUD_ID)

        return _clouds;
    }
    override fun `as`(alias: String): CloudsEnvironments = CloudsEnvironments(DSL.name(alias), this)
    override fun `as`(alias: Name): CloudsEnvironments = CloudsEnvironments(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CloudsEnvironments = CloudsEnvironments(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CloudsEnvironments = CloudsEnvironments(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UUID?, String?, UUID?> = super.fieldsRow() as Row3<UUID?, String?, UUID?>
}
