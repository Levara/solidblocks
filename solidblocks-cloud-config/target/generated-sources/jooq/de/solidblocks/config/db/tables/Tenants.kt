/*
 * This file is generated by jOOQ.
 */
package de.solidblocks.config.db.tables


import de.solidblocks.config.db.DefaultSchema
import de.solidblocks.config.db.indexes.IDX_TENANTS_NAME
import de.solidblocks.config.db.keys.FK_TENANTS_CLOUDS_ENVIRONMENT_ID
import de.solidblocks.config.db.keys.PK_TENANTS
import de.solidblocks.config.db.tables.records.TenantsRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tenants(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TenantsRecord>?,
    aliased: Table<TenantsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TenantsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>TENANTS</code>
         */
        val TENANTS = Tenants()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TenantsRecord> = TenantsRecord::class.java

    /**
     * The column <code>TENANTS.ID</code>.
     */
    val ID: TableField<TenantsRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>TENANTS.NAME</code>.
     */
    val NAME: TableField<TenantsRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>TENANTS.DELETED</code>.
     */
    val DELETED: TableField<TenantsRecord, Boolean?> = createField(DSL.name("DELETED"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>TENANTS.ENVRIONMENT</code>.
     */
    val ENVRIONMENT: TableField<TenantsRecord, UUID?> = createField(DSL.name("ENVRIONMENT"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TenantsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TenantsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>TENANTS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>TENANTS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>TENANTS</code> table reference
     */
    constructor(): this(DSL.name("TENANTS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TenantsRecord>): this(Internal.createPathAlias(child, key), child, key, TENANTS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_TENANTS_NAME)
    override fun getPrimaryKey(): UniqueKey<TenantsRecord> = PK_TENANTS
    override fun getKeys(): List<UniqueKey<TenantsRecord>> = listOf(PK_TENANTS)
    override fun getReferences(): List<ForeignKey<TenantsRecord, *>> = listOf(FK_TENANTS_CLOUDS_ENVIRONMENT_ID)

    private lateinit var _cloudsEnvironments: CloudsEnvironments
    fun cloudsEnvironments(): CloudsEnvironments {
        if (!this::_cloudsEnvironments.isInitialized)
            _cloudsEnvironments = CloudsEnvironments(this, FK_TENANTS_CLOUDS_ENVIRONMENT_ID)

        return _cloudsEnvironments;
    }
    override fun `as`(alias: String): Tenants = Tenants(DSL.name(alias), this)
    override fun `as`(alias: Name): Tenants = Tenants(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tenants = Tenants(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tenants = Tenants(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<UUID?, String?, Boolean?, UUID?> = super.fieldsRow() as Row4<UUID?, String?, Boolean?, UUID?>
}
