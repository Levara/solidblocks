#!/usr/bin/env bash

set -eu

DIR="$( cd "$(dirname "$0")"
  pwd -P
)"

export VERSION="${GITHUB_REF_NAME:-snapshot}"
export TEST_ID="$(echo $RANDOM | md5sum | head -c 8; echo;)"
#export TEST_ID="${USER}"

source "${DIR}/../solidblocks-shell/lib/log.sh"
source "${DIR}/../solidblocks-shell/lib/python.sh"

function task_build {
  shopt -s globstar
  cp ${DIR}/../solidblocks-cloud-init/**/cloud_init_bootstrap_solidblocks "${DIR}/modules/rds-postgresql/cloud_init_bootstrap_solidblocks" ||  { log_die "dependency artifacts not found, please build solidblocks-cloud-init first"; exit 1; }

  mkdir -p "${DIR}/build/snippets"
  (
    cd "${DIR}/snippets"
    zip -r "${DIR}/build/snippets/hetzner-postgres-rds-s3-backup.zip" hetzner-postgres-rds-s3-backup/**/*.tf
    zip -r "${DIR}/build/snippets/hetzner-postgres-rds-local-backup.zip" hetzner-postgres-rds-s3-backup/**/*.tf
    zip -r "${DIR}/build/snippets/hetzner-postgres-rds-private-network.zip" hetzner-postgres-rds-private-network/**/*.tf
  )

  if which terraform-docs; then
    terraform-docs markdown table "${DIR}/modules/rds-postgresql" --hide modules --output-file "${DIR}/modules/rds-postgresql/README.md"
    terraform-docs markdown table "${DIR}/modules/rds-postgresql" --hide modules --output-file "${DIR}/../doc/content/hetzner/rds-postgresql.md"
  fi
}

function task_lint {
  ensure_environment
  find "${DIR}/lib" -name "*.sh" -exec shellcheck {} \;
}

function terraform_wrapper {
  local module=${1:-}
  shift || true

  (
    cd "${DIR}/${module}"

    if [[ ! -d ".terraform" ]]; then
      terraform init
    fi

    export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/hcloud_api_token)}"
    export AWS_DEFAULT_REGION="eu-central-1"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-$(pass solidblocks/aws/test/secret_access_key)}"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-$(pass solidblocks/aws/test/access_key)}" #

    export TF_VAR_backup_s3_access_key="${AWS_ACCESS_KEY_ID:-$(pass solidblocks/aws/test/access_key)}" #
    export TF_VAR_backup_s3_secret_key="${AWS_SECRET_ACCESS_KEY:-$(pass solidblocks/aws/test/secret_access_key)}"
    export TF_VAR_test_id="${TEST_ID}"
    export TF_VAR_solidblocks_version=${VERSION}

    terraform ${@}
  )
}

function task_test_snippets_psql_wrapper() {
  local module="${1:-}"
  PGPASSWORD=password1 psql --host "$(terraform_wrapper "${module}" output -raw ipv4_address)" --user "user1" database1
}

function task_test_snippets_ssh {
  local module="${1:-}"
  ssh -F "${DIR}/${module}/ssh_config" $(terraform_wrapper "${module}" output -raw ipv4_address) ${@}
}

function task_test_snippets_local () {
  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/storage" init -upgrade
  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/instance" init -upgrade

  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/storage" apply -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/instance" apply -auto-approve

  log_divider_header "waiting for sql connectivity"
  while ! echo "SELECT 1;" | task_test_snippets_psql_wrapper "snippets/hetzner-postgres-rds-local-backup/instance"; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer

  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/instance" destroy -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-local-backup/storage" destroy -auto-approve
}

function task_test_snippets_s3 () {
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/storage" init -upgrade
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/instance" init -upgrade

  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/storage" apply -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/instance" apply -auto-approve

  log_divider_header "waiting for sql connectivity"
  while ! echo "SELECT 1;" | task_test_snippets_psql_wrapper "snippets/hetzner-postgres-rds-s3-backup/instance"; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer

  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/instance" destroy -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup/storage" destroy -auto-approve
}

function task_test_snippets_private_network () {
  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/storage" init -upgrade
  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/instance" init -upgrade

  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/storage" apply -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/instance" apply -auto-approve

  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/instance" destroy -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-private-network/storage" destroy -auto-approve
}

function task_test_snippets () {
  task_test_snippets_private_network
  task_test_snippets_local
  task_test_snippets_s3
}

function test_setup_testbed_s3() {
  terraform_wrapper "test/terraform/base" apply -auto-approve
  terraform_wrapper "test/terraform/instance_s3" apply -auto-approve

  test_wait_for_ssh
}

function test_setup_testbed_local() {
  terraform_wrapper "test/terraform/base" apply -auto-approve
  terraform_wrapper "test/terraform/backup_storage" apply -auto-approve
  terraform_wrapper "test/terraform/instance_local" apply -auto-approve

  test_wait_for_ssh
}

function test_wait_for_ssh() {
  while ! task_test_ssh whoami; do
    log_echo_warning "waiting for ssh"
    sleep 10
  done
}

function create_table {
  cat <<-EOF
CREATE TABLE dogs (
	id serial PRIMARY KEY,
	name VARCHAR ( 50 ) UNIQUE NOT NULL
);
EOF
}

function insert_dog {
  cat <<-EOF
INSERT into dogs (name) VALUES ('rudi');
EOF
}

function test_ip_address() {
  cat "${DIR}/test/terraform/ipv4_address"
}

function test_jumphost_ip_address() {
  cat "${DIR}/test/terraform/jumphost_ipv4_address"
}

function psql_wrapper() {
  PGPASSWORD=password1 psql --host "$(test_ip_address)" --user "user1" database1
}

function psql_wrapper_jumphost() {
  task_test_jumphost_ssh PGPASSWORD=password1 psql --host 10.0.1.4 --user "user1" database1
}

function test_private_network () {
  terraform_wrapper "test/terraform/base" apply -auto-approve
  terraform_wrapper "test/terraform/backup_storage" apply -auto-approve
  terraform_wrapper "test/terraform/instance_private_network" apply -auto-approve

  test_wait_for_ssh
  task_test_jumphost_ssh

  while ! task_test_jumphost_ssh whoami; do
    log_echo_warning "waiting for ssh"
    sleep 10
  done

  log_divider_header "waiting for sql connectivity"
  while ! echo "SELECT 1;" | psql_wrapper_jumphost; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer

}

function test_restore_from_local() {
  test_setup_testbed_local

  "${DIR}/venv/bin/pytest" -rP --ssh-config=${DIR}/test/terraform/ssh_config --hosts=$(test_ip_address) "${DIR}/test/test_local.py"
  test_wait_for_docker
  test_wait_for_sql

  log_divider_header "create test table"
  create_table | psql_wrapper
  log_divider_footer

  log_divider_header "add test data"
  insert_dog | psql_wrapper
  log_divider_footer

  log_divider_header "trigger full backup"
  task_test_ssh docker exec "rds-postgresql-${TEST_ID}_postgresql" /rds/bin/backup-full.sh
  log_divider_footer

  log_divider_header "destroy instance"
  terraform_wrapper "test/terraform/instance_local" destroy -auto-approve
  log_divider_footer

  log_divider_header "re-create instance"
  terraform_wrapper "test/terraform/instance_local" apply -auto-approve
  log_divider_footer

  test_wait_for_docker
  test_wait_for_sql

  echo "SELECT * FROM dogs;" | psql_wrapper | grep "rudi"

  test_clean_testbed_local
}

function test_restore_from_s3() {
  #test_clean_testbed
  test_setup_testbed_s3

  "${DIR}/venv/bin/pytest" -rP --ssh-config=${DIR}/test/terraform/ssh_config --hosts=$(test_ip_address) "${DIR}/test/test_s3.py"
  test_wait_for_docker
  test_wait_for_sql

  log_divider_header "create test table"
  create_table | psql_wrapper
  log_divider_footer

  log_divider_header "add test data"
  insert_dog | psql_wrapper
  log_divider_footer

  log_divider_header "trigger full backup"
  task_test_ssh docker exec "rds-postgresql-${TEST_ID}_postgresql" /rds/bin/backup-full.sh
  log_divider_footer

  log_divider_header "destroy instance"
  terraform_wrapper "test/terraform/instance_s3" destroy -auto-approve
  log_divider_footer

  log_divider_header "re-create instance"
  terraform_wrapper "test/terraform/instance_s3" apply -auto-approve
  log_divider_footer

  test_wait_for_docker
  test_wait_for_sql

  echo "SELECT * FROM dogs;" | psql_wrapper | grep "rudi"

  test_clean_testbed_s3
}

function test_wait_for_docker() {
  log_divider_header "waiting for rds docker instance"
  while ! task_test_ssh docker exec "rds-postgresql-${TEST_ID}_postgresql" whoami; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer
}

function test_wait_for_sql() {
  log_divider_header "waiting for sql connectivity"
  while ! echo "SELECT 1;" | psql_wrapper; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer
}

function task_test {
  if [[ -n "${SKIP_TESTS:-}" ]]; then
    exit 0
  fi

  python_ensure_venv "${DIR}"

  test_restore_from_local
  test_restore_from_s3
}

function test_clean_testbed_s3() {
  terraform_wrapper "test/terraform/instance_s3" destroy -auto-approve
  terraform_wrapper "test/terraform/base" destroy -auto-approve
}

function test_clean_testbed_local() {
  terraform_wrapper "test/terraform/instance_local" destroy -auto-approve
  terraform_wrapper "test/terraform/base" destroy -auto-approve
  terraform_wrapper "test/terraform/backup_storage" destroy -auto-approve
}

function task_release_docker {
  echo "not implemented"

}

function task_test_ssh {
  ssh -F ${DIR}/test/terraform/ssh_config $(test_ip_address) ${@}
}

function task_test_jumphost_ssh {
  ssh -F ${DIR}/test/terraform/ssh_config $(test_jumphost_ip_address) ${@}
}

function task_clean {
  #test_clean_testbed_s3
  rm -rf "${DIR}/build"
}

function task_format {
  echo "<not implemented>"
}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

arg=${1:-}
shift || true
case ${arg} in
  lint) task_lint "$@" ;;
  clean) task_clean "$@" ;;
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  format) task_format "$@" ;;
  test-restore-local) test_restore_from_local "$@" ;;
  test-restore-s3) test_restore_from_s3 "$@" ;;
  test-private-network) test_private_network "$@" ;;
  test-ssh) task_test_ssh "$@" ;;
  test-ssh-jumphost) task_test_jumphost_ssh "$@" ;;
  test-snippets) task_test_snippets "$@" ;;
  test-snippet-ssh) task_test_snippets_ssh "$@" ;;
  release-docker) task_release_docker "$@" ;;
  *) task_usage ;;
esac
