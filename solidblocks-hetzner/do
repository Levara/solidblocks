#!/usr/bin/env bash

set -eu

DIR="$( cd "$(dirname "$0")"
  pwd -P
)"

export VERSION="${GITHUB_REF_NAME:-snapshot}"
#export TEST_ID="$(echo $RANDOM | md5sum | head -c 8; echo;)"
export TEST_ID="${USER}"

source "${DIR}/../solidblocks-shell/lib/log.sh"
source "${DIR}/../solidblocks-shell/lib/python.sh"

function task_build {
  #sed "/__CLOUD_INIT_BOOTSTRAP_SOLIDBLOCKS__/e cat ${DIR}/../solidblocks-cloud-init/build/snippets/cloud_init_bootstrap_solidblocks" "${DIR}/templates/rds-postgresql/user-data.sh" | grep -v "__CLOUD_INIT_BOOTSTRAP_SOLIDBLOCKS__" > "${DIR}/modules/rds-postgresql/user-data.sh"
  echo ""
}

function task_lint {
  ensure_environment
  find "${DIR}/lib" -name "*.sh" -exec shellcheck {} \;
}

function terraform_wrapper {
  local module=${1:-}
  shift || true

  (
    cd "${DIR}/${module}"

    if [[ ! -d ".terraform" ]]; then
      terraform init
    fi

    export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/hcloud_api_token)}"
    export AWS_DEFAULT_REGION="eu-central-1"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-$(pass solidblocks/aws/test/secret_access_key)}"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-$(pass solidblocks/aws/test/access_key)}" #

    export TF_VAR_backup_s3_access_key="${AWS_ACCESS_KEY_ID:-$(pass solidblocks/aws/test/access_key)}" #
    export TF_VAR_backup_s3_secret_key="${AWS_SECRET_ACCESS_KEY:-$(pass solidblocks/aws/test/secret_access_key)}"
    export TF_VAR_test_id="${TEST_ID}"
    export TF_VAR_solidblocks_version=${VERSION}

    terraform ${@}
  )
}

function task_test_snippets () {
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup" apply -auto-approve
  terraform_wrapper "snippets/hetzner-postgres-rds-s3-backup" destroy -auto-approve
}

function test_setup_testbed() {
  terraform_wrapper "test/terraform/s3" apply -auto-approve
  terraform_wrapper "test/terraform/backup" apply -auto-approve
  terraform_wrapper "test/terraform/instance" apply -auto-approve

  while ! ssh -F ${DIR}/test/terraform/instance/ssh_config test whoami; do
    log_echo_warning "waiting for ssh"
    sleep 10
  done
}

function test_base() {
  test_setup_testbed
  "${DIR}/venv/bin/pytest" --ssh-config=${DIR}/test/terraform/instance/ssh_config --hosts=test --show-capture=all -s "${DIR}/test/test_base.py"
}

function create_table {
  cat <<-EOF
CREATE TABLE dogs (
	id serial PRIMARY KEY,
	name VARCHAR ( 50 ) UNIQUE NOT NULL
);
EOF
}

function insert_dog {
  cat <<-EOF
INSERT into dogs (name) VALUES ('rudi');
EOF
}

function psql_wrapper() {
  PGPASSWORD=password1 psql --host "$(terraform_wrapper "test/terraform/instance" output -raw ipv4_address)" --user "user1" database1
}

function test_restore_from_s3() {
  test_clean_testbed
  test_setup_testbed

  test_wait_for_docker
  test_wait_for_sql

  log_divider_header "create test table"
  create_table | psql_wrapper
  log_divider_footer

  log_divider_header "add test data"
  insert_dog | psql_wrapper
  log_divider_footer

  log_divider_header "trigger full backup"
  task_ssh_test docker exec rds-postgresql-1_rds-postgresql-1_1 /rds/bin/backup-full.sh
  log_divider_footer

  log_divider_header "destroy instance"
  terraform_wrapper "test/terraform/instance" destroy -auto-approve
  terraform_wrapper "test/terraform/backup" destroy -auto-approve
  log_divider_footer

  log_divider_header "re-create instance"
  terraform_wrapper "test/terraform/instance" apply -auto-approve
  log_divider_footer

  test_wait_for_docker
  test_wait_for_sql

  echo "SELECT * FROM dogs;" | psql_wrapper | grep "rudi"

  test_clean_testbed
}

function test_wait_for_docker() {
  log_divider_header "waiting for rds docker instance"
  while ! task_ssh_test docker exec rds-postgresql-1_rds-postgresql-1_1 whoami; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer
}

function test_wait_for_sql() {
  log_divider_header "waiting for sql connectivity"
  while ! echo "SELECT 1;" | psql_wrapper; do
    log_echo_warning "still waiting"
    sleep 5
  done
  log_divider_footer
}

function task_test {
  if [[ -n "${SKIP_TESTS:-}" ]]; then
    exit 0
  fi

  python_ensure_venv

  #test_base
  test_restore_from_s3

}

function test_clean_testbed() {
  terraform_wrapper "test/terraform/instance" destroy -auto-approve
  terraform_wrapper "test/terraform/backup" destroy -auto-approve
  terraform_wrapper "test/terraform/s3" destroy -auto-approve
}

function task_ssh_test {
  (
    cd ${DIR}/test/terraform/instance/
    ssh -F ${DIR}/test/terraform/instance/ssh_config test ${@}
  )
}

function task_clean {
  test_clean_testbed
  rm -rf "${DIR}/build"
}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

arg=${1:-}
shift || true
case ${arg} in
  lint) task_lint "$@" ;;
  clean) task_clean "$@" ;;
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  ssh-test) task_ssh_test "$@" ;;
  test-snippets) task_test_snippets "$@" ;;
  *) task_usage ;;
esac
